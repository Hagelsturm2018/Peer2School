{"remainingRequest":"/Users/jannikschilling/Documents/Hagelsturm2018.github.io/peer2school-master/node_modules/babel-loader/lib/index.js!/Users/jannikschilling/Documents/Hagelsturm2018.github.io/peer2school-master/node_modules/eslint-loader/index.js??ref--13-0!/Users/jannikschilling/Documents/Hagelsturm2018.github.io/peer2school-master/src/lib/webrtc-peer.js","dependencies":[{"path":"/Users/jannikschilling/Documents/Hagelsturm2018.github.io/peer2school-master/src/lib/webrtc-peer.js","mtime":1584780410000},{"path":"/Users/jannikschilling/Documents/Hagelsturm2018.github.io/peer2school-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jannikschilling/Documents/Hagelsturm2018.github.io/peer2school-master/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jannikschilling/Documents/Hagelsturm2018.github.io/peer2school-master/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICIvVXNlcnMvamFubmlrc2NoaWxsaW5nL0RvY3VtZW50cy9IYWdlbHN0dXJtMjAxOC5naXRodWIuaW8vcGVlcjJzY2hvb2wtbWFzdGVyL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllcyI7CmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAiL1VzZXJzL2phbm5pa3NjaGlsbGluZy9Eb2N1bWVudHMvSGFnZWxzdHVybTIwMTguZ2l0aHViLmlvL3BlZXIyc2Nob29sLW1hc3Rlci9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2siOwppbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gIi9Vc2Vycy9qYW5uaWtzY2hpbGxpbmcvRG9jdW1lbnRzL0hhZ2Vsc3R1cm0yMDE4LmdpdGh1Yi5pby9wZWVyMnNjaG9vbC1tYXN0ZXIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzIjsKaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gIi9Vc2Vycy9qYW5uaWtzY2hpbGxpbmcvRG9jdW1lbnRzL0hhZ2Vsc3R1cm0yMDE4LmdpdGh1Yi5pby9wZWVyMnNjaG9vbC1tYXN0ZXIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iOwppbXBvcnQgX2dldFByb3RvdHlwZU9mIGZyb20gIi9Vc2Vycy9qYW5uaWtzY2hpbGxpbmcvRG9jdW1lbnRzL0hhZ2Vsc3R1cm0yMDE4LmdpdGh1Yi5pby9wZWVyMnNjaG9vbC1tYXN0ZXIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2dldFByb3RvdHlwZU9mIjsKaW1wb3J0IF9pbmhlcml0cyBmcm9tICIvVXNlcnMvamFubmlrc2NoaWxsaW5nL0RvY3VtZW50cy9IYWdlbHN0dXJtMjAxOC5naXRodWIuaW8vcGVlcjJzY2hvb2wtbWFzdGVyL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0cyI7Ci8vIENvcHlyaWdodCAoYykgMjAyMCBEaXJrIEhvbHR3aWNrLiBBbGwgcmlnaHRzIHJlc2VydmVkLiBodHRwczovL2hvbHR3aWNrLmRlL2NvcHlyaWdodAppbXBvcnQgU2ltcGxlUGVlciBmcm9tICdzaW1wbGUtcGVlcic7CmltcG9ydCB7IEVtaXR0ZXIgfSBmcm9tICcuL2VtaXR0ZXInOwoKdmFyIGxvZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2FwcDp3ZWJydGMtcGVlcicpOwoKdmFyIGN0ciA9IDE7CmV4cG9ydCB2YXIgV2ViUlRDUGVlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0VtaXR0ZXIpIHsKICBfaW5oZXJpdHMoV2ViUlRDUGVlciwgX0VtaXR0ZXIpOwoKICBmdW5jdGlvbiBXZWJSVENQZWVyKCkgewogICAgdmFyIF90aGlzOwoKICAgIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTsKCiAgICB2YXIgcmVtb3RlID0gX3JlZi5yZW1vdGUsCiAgICAgICAgbG9jYWwgPSBfcmVmLmxvY2FsLAogICAgICAgIG9wdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbInJlbW90ZSIsICJsb2NhbCJdKTsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgV2ViUlRDUGVlcik7CgogICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoV2ViUlRDUGVlcikuY2FsbCh0aGlzKSk7CiAgICBfdGhpcy5yZW1vdGUgPSByZW1vdGU7CiAgICBfdGhpcy5sb2NhbCA9IGxvY2FsOwogICAgX3RoaXMuaW5pdGlhdG9yID0gb3B0LmluaXRpYXRvcjsKICAgIF90aGlzLmlkID0gJ3dlYnJ0Yy1wZWVyJyArIGN0cisrOwogICAgX3RoaXMuYWN0aXZlID0gZmFsc2U7CiAgICBfdGhpcy5zdHJlYW0gPSBudWxsOwogICAgbG9nKCdwZWVyJywgX3RoaXMuaWQpOwogICAgX3RoaXMucGVlciA9IG5ldyBTaW1wbGVQZWVyKG9wdCk7IC8vIFdlIHJlY2VpdmUgYSBjb25uZWN0aW9uIGVycm9yCgogICAgX3RoaXMucGVlci5vbignZXJyb3InLCBmdW5jdGlvbiAoZXJyKSB7CiAgICAgIGxvZygiIi5jb25jYXQoX3RoaXMuaWQsICIgfCBlcnJvciIpLCBlcnIpOwoKICAgICAgX3RoaXMuZW1pdCgnZXJyb3InLCBlcnIpOwogICAgfSk7IC8vIFRoaXMgbWVhbnMsIHdlIHJlY2VpdmVkIG5ldHdvcmsgZGV0YWlscyAoc2lnbmFsKSB3ZSBuZWVkIHRvIHByb3ZpZGUKICAgIC8vIHRoZSByZW1vdGUgcGVlciwgc28gaGUgY2FuIHNldCB1cCBhIGNvbm5lY3Rpb24gdG8gdXMuIFVzdWFsbHkgd2Ugd2lsbAogICAgLy8gc2VuZCB0aGlzIG92ZXIgYSBzZXBhcmF0ZSBjaGFubmVsIGxpa2UgdGhlIHdlYiBzb2NrZXQgc2lnbmFsaW5nIHNlcnZlcgoKCiAgICBfdGhpcy5wZWVyLm9uKCdzaWduYWwnLCBmdW5jdGlvbiAoZGF0YSkgewogICAgICBsb2coIiIuY29uY2F0KF90aGlzLmlkLCAiIHwgc2lnbmFsIiksIF90aGlzLmluaXRpYXRvcik7CgogICAgICBfdGhpcy5lbWl0KCdzaWduYWwnLCBkYXRhKTsKICAgIH0pOyAvLyBXZSByZWNlaXZlZCBkYXRhIGZyb20gdGhlIHBlZXIKCgogICAgX3RoaXMucGVlci5vbignZGF0YScsIGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgIGxvZygiIi5jb25jYXQoX3RoaXMuaWQsICIgfCBkYXRhIiksIGRhdGEpOwoKICAgICAgX3RoaXMuZW1pdCgnZGF0YScsIGRhdGEpOwoKICAgICAgX3RoaXMuZW1pdCgnbWVzc2FnZScsIHsKICAgICAgICBkYXRhOiBkYXRhCiAgICAgIH0pOyAvLyBDaGFubmVsIGNvbXBhdAoKICAgIH0pOyAvLyBDb25uZWN0aW9uIHN1Y2NlZWRlZAoKCiAgICBfdGhpcy5wZWVyLm9uKCdjb25uZWN0JywgZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgIGxvZygiIi5jb25jYXQoX3RoaXMuaWQsICIgfCBjb25uZWN0IikpOwogICAgICBfdGhpcy5hY3RpdmUgPSB0cnVlOyAvLyBwLnNlbmQoJ3doYXRldmVyJyArIE1hdGgucmFuZG9tKCkpCgogICAgICBfdGhpcy5lbWl0KCdjb25uZWN0JywgZXZlbnQpOwogICAgfSk7CgogICAgX3RoaXMucGVlci5vbignc3RyZWFtJywgZnVuY3Rpb24gKHN0cmVhbSkgewogICAgICBfdGhpcy5zdHJlYW0gPSBzdHJlYW07CgogICAgICBfdGhpcy5lbWl0KCdzdHJlYW0nLCBzdHJlYW0pOwogICAgfSk7CgogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFdlYlJUQ1BlZXIsIFt7CiAgICBrZXk6ICJhZGRTdHJlYW0iLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFN0cmVhbShzdHJlYW0pIHsKICAgICAgdGhpcy5wZWVyLmFkZFN0cmVhbShzdHJlYW0pOwogICAgfSAvLyBXZSBnb3QgYSBzaWduYWwgZnJvbSB0aGUgcmVtb3RlIHBlZXIgYW5kIHdpbGwgdXNlIGl0IG5vdyB0byBlc3RhYmxpc2ggdGhlIGNvbm5lY3Rpb24KCiAgfSwgewogICAga2V5OiAic2lnbmFsIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzaWduYWwoZGF0YSkgewogICAgICB0aGlzLnBlZXIuc2lnbmFsKGRhdGEpOwogICAgfQogIH0sIHsKICAgIGtleTogInBvc3RNZXNzYWdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwb3N0TWVzc2FnZShkYXRhKSB7CiAgICAgIC8vIENoYW5uZWwgY29tcGF0CiAgICAgIHRoaXMucGVlci5zZW5kKGRhdGEpOwogICAgfQogIH0sIHsKICAgIGtleTogImNsb3NlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjbG9zZSgpIHsKICAgICAgdmFyIF90aGlzJHBlZXI7CgogICAgICBpZiAoKF90aGlzJHBlZXIgPSB0aGlzLnBlZXIpID09PSBudWxsIHx8IF90aGlzJHBlZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90aGlzJHBlZXIuY2xvc2UpIHsKICAgICAgICB0aGlzLnBlZXIuY2xvc2UoKTsKICAgICAgfQoKICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTsKICAgIH0KICB9XSk7CgogIHJldHVybiBXZWJSVENQZWVyOwp9KEVtaXR0ZXIpOw=="},{"version":3,"sources":["/Users/jannikschilling/Documents/Hagelsturm2018.github.io/peer2school-master/src/lib/webrtc-peer.js"],"names":["SimplePeer","Emitter","log","require","ctr","WebRTCPeer","remote","local","opt","initiator","id","active","stream","peer","on","err","emit","data","event","addStream","signal","send","close"],"mappings":";;;;;;AAAA;AAEA,OAAOA,UAAP,MAAuB,aAAvB;AACA,SAASC,OAAT,QAAwB,WAAxB;;AAEA,IAAMC,GAAG,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,iBAAjB,CAAZ;;AAEA,IAAIC,GAAG,GAAG,CAAV;AAEA,WAAaC,UAAb;AAAA;;AAEE,wBAA4C;AAAA;;AAAA,mFAAJ,EAAI;;AAAA,QAA9BC,MAA8B,QAA9BA,MAA8B;AAAA,QAAtBC,KAAsB,QAAtBA,KAAsB;AAAA,QAAZC,GAAY;;AAAA;;AAC1C;AAEA,UAAKF,MAAL,GAAcA,MAAd;AACA,UAAKC,KAAL,GAAaA,KAAb;AACA,UAAKE,SAAL,GAAiBD,GAAG,CAACC,SAArB;AACA,UAAKC,EAAL,GAAU,gBAAgBN,GAAG,EAA7B;AACA,UAAKO,MAAL,GAAc,KAAd;AACA,UAAKC,MAAL,GAAc,IAAd;AAEAV,IAAAA,GAAG,CAAC,MAAD,EAAS,MAAKQ,EAAd,CAAH;AAEA,UAAKG,IAAL,GAAY,IAAIb,UAAJ,CAAeQ,GAAf,CAAZ,CAZ0C,CAc1C;;AACA,UAAKK,IAAL,CAAUC,EAAV,CAAa,OAAb,EAAsB,UAAAC,GAAG,EAAI;AAC3Bb,MAAAA,GAAG,WAAI,MAAKQ,EAAT,eAAuBK,GAAvB,CAAH;;AACA,YAAKC,IAAL,CAAU,OAAV,EAAmBD,GAAnB;AACD,KAHD,EAf0C,CAoB1C;AACA;AACA;;;AACA,UAAKF,IAAL,CAAUC,EAAV,CAAa,QAAb,EAAuB,UAAAG,IAAI,EAAI;AAC7Bf,MAAAA,GAAG,WAAI,MAAKQ,EAAT,gBAAwB,MAAKD,SAA7B,CAAH;;AACA,YAAKO,IAAL,CAAU,QAAV,EAAoBC,IAApB;AACD,KAHD,EAvB0C,CA4B1C;;;AACA,UAAKJ,IAAL,CAAUC,EAAV,CAAa,MAAb,EAAqB,UAAAG,IAAI,EAAI;AAC3Bf,MAAAA,GAAG,WAAI,MAAKQ,EAAT,cAAsBO,IAAtB,CAAH;;AACA,YAAKD,IAAL,CAAU,MAAV,EAAkBC,IAAlB;;AACA,YAAKD,IAAL,CAAU,SAAV,EAAqB;AAAEC,QAAAA,IAAI,EAAJA;AAAF,OAArB,EAH2B,CAGI;;AAChC,KAJD,EA7B0C,CAmC1C;;;AACA,UAAKJ,IAAL,CAAUC,EAAV,CAAa,SAAb,EAAwB,UAAAI,KAAK,EAAI;AAC/BhB,MAAAA,GAAG,WAAI,MAAKQ,EAAT,gBAAH;AACA,YAAKC,MAAL,GAAc,IAAd,CAF+B,CAG/B;;AACA,YAAKK,IAAL,CAAU,SAAV,EAAqBE,KAArB;AACD,KALD;;AAOA,UAAKL,IAAL,CAAUC,EAAV,CAAa,QAAb,EAAuB,UAAAF,MAAM,EAAI;AAC/B,YAAKA,MAAL,GAAcA,MAAd;;AACA,YAAKI,IAAL,CAAU,QAAV,EAAoBJ,MAApB;AACD,KAHD;;AA3C0C;AAgD3C;;AAlDH;AAAA;AAAA,8BAoDYA,MApDZ,EAoDoB;AAChB,WAAKC,IAAL,CAAUM,SAAV,CAAoBP,MAApB;AACD,KAtDH,CAwDE;;AAxDF;AAAA;AAAA,2BAyDSK,IAzDT,EAyDe;AACX,WAAKJ,IAAL,CAAUO,MAAV,CAAiBH,IAAjB;AACD;AA3DH;AAAA;AAAA,gCA6DcA,IA7Dd,EA6DoB;AAAG;AACnB,WAAKJ,IAAL,CAAUQ,IAAV,CAAeJ,IAAf;AACD;AA/DH;AAAA;AAAA,4BAiEU;AAAA;;AACN,wBAAI,KAAKJ,IAAT,+CAAI,WAAWS,KAAf,EAAsB;AACpB,aAAKT,IAAL,CAAUS,KAAV;AACD;;AACD,WAAKX,MAAL,GAAc,KAAd;AACD;AAtEH;;AAAA;AAAA,EAAgCV,OAAhC","sourcesContent":["// Copyright (c) 2020 Dirk Holtwick. All rights reserved. https://holtwick.de/copyright\n\nimport SimplePeer from 'simple-peer'\nimport { Emitter } from './emitter'\n\nconst log = require('debug')('app:webrtc-peer')\n\nlet ctr = 1\n\nexport class WebRTCPeer extends Emitter {\n\n  constructor({ remote, local, ...opt } = {}) {\n    super()\n\n    this.remote = remote\n    this.local = local\n    this.initiator = opt.initiator\n    this.id = 'webrtc-peer' + ctr++\n    this.active = false\n    this.stream = null\n\n    log('peer', this.id)\n\n    this.peer = new SimplePeer(opt)\n\n    // We receive a connection error\n    this.peer.on('error', err => {\n      log(`${this.id} | error`, err)\n      this.emit('error', err)\n    })\n\n    // This means, we received network details (signal) we need to provide\n    // the remote peer, so he can set up a connection to us. Usually we will\n    // send this over a separate channel like the web socket signaling server\n    this.peer.on('signal', data => {\n      log(`${this.id} | signal`, this.initiator)\n      this.emit('signal', data)\n    })\n\n    // We received data from the peer\n    this.peer.on('data', data => {\n      log(`${this.id} | data`, data)\n      this.emit('data', data)\n      this.emit('message', { data }) // Channel compat\n    })\n\n    // Connection succeeded\n    this.peer.on('connect', event => {\n      log(`${this.id} | connect`)\n      this.active = true\n      // p.send('whatever' + Math.random())\n      this.emit('connect', event)\n    })\n\n    this.peer.on('stream', stream => {\n      this.stream = stream\n      this.emit('stream', stream)\n    })\n\n  }\n\n  addStream(stream) {\n    this.peer.addStream(stream)\n  }\n\n  // We got a signal from the remote peer and will use it now to establish the connection\n  signal(data) {\n    this.peer.signal(data)\n  }\n\n  postMessage(data) {  // Channel compat\n    this.peer.send(data)\n  }\n\n  close() {\n    if (this.peer?.close) {\n      this.peer.close()\n    }\n    this.active = false\n  }\n\n}\n"]}]}